<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blogs on gRPC</title>
    <link>http://grpc.io/blog/</link>
    <description>Recent content in Blogs on gRPC</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 29 Aug 2018 16:52:54 +0700</lastBuildDate>
    
	<atom:link href="http://grpc.io/blog/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Test</title>
      <link>http://grpc.io/blog/test/</link>
      <pubDate>Wed, 29 Aug 2018 16:52:54 +0700</pubDate>
      
      <guid>http://grpc.io/blog/test/</guid>
      <description>This is a new blog post!</description>
    </item>
    
    <item>
      <title>2017-08-17 Community Meeting Update</title>
      <link>http://grpc.io/blog/2017-08-17-community-meeting-update/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://grpc.io/blog/2017-08-17-community-meeting-update/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Next Community Meeting:&lt;/strong&gt; Thursday, August 31, 2017 11am Pacific Time (US and Canada)&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>2017-08-22 gRPC-Go performance Improvements</title>
      <link>http://grpc.io/blog/2017-08-22-grpc-go-perf-improvements/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://grpc.io/blog/2017-08-22-grpc-go-perf-improvements/</guid>
      <description>&lt;p&gt;For past few months we&amp;rsquo;ve been working on improving gRPC-Go performance. This includes improving network utilization, optimizing CPU usage and memory allocations. Most of our recent effort has been focused around revamping gRPC-Go flow control. After several optimizations and new features we&amp;rsquo;ve been able to improve quite significantly, especially on high-latency networks. We expect users that are working with high-latency networks and large messages to see an order of magnitude performance gain.
Benchmark results at the end.&lt;/p&gt;

&lt;p&gt;This blog summarizes the work we have done so far (in chronological order) to improve performance and lays out our near-future plans.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>2018-01-19 gRPC-Go Engineering Practices</title>
      <link>http://grpc.io/blog/2018-01-22-grpc-go-engineering-practices/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://grpc.io/blog/2018-01-22-grpc-go-engineering-practices/</guid>
      <description>&lt;p&gt;It&amp;rsquo;s the start of the new year, and almost the end of my first full year on the
gRPC-Go project, so I&amp;rsquo;d like to take this opportunity to provide an update on
the state of gRPC-Go development and give some visibility into how we manage the
project.  For me, personally, this is the first open source project to which
I&amp;rsquo;ve meaningfully contributed, so this year has been a learning experience for
me.  Over this year, the team has made constant improvements to our work habits
and communication.  I still see room for improvement, but I believe we are in a
considerably better place than we were a year ago.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Announcing out of the box support for gRPC in the Flatbuffers serialization library.</title>
      <link>http://grpc.io/blog/2017-08-17-grpc-flatbuffers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://grpc.io/blog/2017-08-17-grpc-flatbuffers/</guid>
      <description>&lt;p&gt;The recent release of Flatbuffers &lt;a href=&#34;https://github.com/google/flatbuffers/releases&#34;&gt;version 1.7&lt;/a&gt; introduced truly zero-copy support for gRPC out of the box.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://google.github.io/flatbuffers/&#34;&gt;Flatbuffers&lt;/a&gt; is a serialization library that allows you to access serialized data without first unpacking it or allocating any
additional data structures. It was originally designed for games and other resource constrained applications, but is now finding more general use, both by teams within Google and in other companies such as Netflix and Facebook.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Building gRPC services with bazel and rules_protobuf</title>
      <link>http://grpc.io/blog/2016-10-13-bazel-rules-protobuf/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://grpc.io/blog/2016-10-13-bazel-rules-protobuf/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://grpc.io/&#34;&gt;gRPC&lt;/a&gt; makes it easier to build high-performance
microservices by providing generated service entrypoints in a variety
of different languages.  &lt;a href=&#34;https://bazel.io&#34;&gt;Bazel&lt;/a&gt; complements these
efforts with a capable and fast polyglot build environment.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/pubref/rules_protobuf&#34;&gt;rules_protobuf&lt;/a&gt; extends
bazel and makes it easier develop gRPC services.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Google Cloud PubSub - with the power of gRPC!</title>
      <link>http://grpc.io/blog/2016-3-24-pubsub/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://grpc.io/blog/2016-3-24-pubsub/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://cloud.google.com/pubsub/&#34;&gt;Google Cloud PubSub&lt;/a&gt; is Google&amp;rsquo;s scalable real-time messaging service that lets users send and receive messages between independent applications. It&amp;rsquo;s an important part of Google Cloud Platform&amp;rsquo;s big data offering, and is used by customers worldwide to build their own robust, global services. However, until now, the only way to use the Cloud PubSub API was via JSON over HTTP. That&amp;rsquo;s all changed with the release of &lt;a href=&#34;https://cloud.google.com/blog/big-data/2016/03/announcing-grpc-alpha-for-google-cloud-pubsub&#34;&gt;PubSub gRPC alpha&lt;/a&gt;. Now &lt;strong&gt;users can access PubSub via gRPC&lt;/strong&gt; and benefit from all the advantages it brings.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Gracefully clean up in gRPC JUnit tests</title>
      <link>http://grpc.io/blog/2018-06-26-gracefully_clean_up_in_grpc_junit_tests/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://grpc.io/blog/2018-06-26-gracefully_clean_up_in_grpc_junit_tests/</guid>
      <description>&lt;p&gt;It is best practice to always clean up gRPC resources such as client channels, servers, and previously attached Contexts whenever they are no longer needed.&lt;/p&gt;

&lt;p&gt;This is even true for JUnit tests, because otherwise leaked resources may not only linger in your machine forever, but also interfere with subsequent tests. A not-so-bad case is that subsequent tests can&amp;rsquo;t pass because of a leaked resource from the previous test. The worst case is that some subsequent tests pass that wouldn&amp;rsquo;t have passed at all if the previously passed test had not leaked a resource.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>HTTP/2 Smarter At Scale</title>
      <link>http://grpc.io/blog/2018-07-13-http2_smarter_at_scale/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://grpc.io/blog/2018-07-13-http2_smarter_at_scale/</guid>
      <description>&lt;p&gt;Much of the web today runs on HTTP/1.1. The spec for HTTP/1.1 was published in June of 1999, just shy of 20 years ago. A lot has changed since then, which makes it all the more remarkable that HTTP/1.1 has persisted and flourished for so long. But in some areas it’s beginning to show its age; for the most part, in that the designers weren’t building for the scale at which HTTP/1.1 would be used and the astonishing amount of traffic that it would come to handle. A not-so-bad case is that subsequent tests can&amp;rsquo;t pass because of a leaked resource from the previous test. The worst case is that some subsequent tests pass that wouldn&amp;rsquo;t have passed at all if the previously passed test had not leaked a resource.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Migration to Google Cloud Platform — gRPC &amp; grpc-gateway</title>
      <link>http://grpc.io/blog/2017-04-12-yikyak/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://grpc.io/blog/2017-04-12-yikyak/</guid>
      <description>&lt;p&gt;Our guest post today comes from &lt;a href=&#34;https://www.linkedin.com/in/miguel-mendez-008231/&#34;&gt;Miguel Mendez&lt;/a&gt; of Yik Yak.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This post was originally a part of the &lt;a href=&#34;https://medium.com/yik-yak-eng&#34;&gt;Yik Yak Engineering Blog&lt;/a&gt; which focused on sharing the lessons learned as we evolved Yik Yak from early-stage startup code running in Amazon Web Services to an eventual incremental rewrite, re-architecture, and live-migration to Google Cloud Platform.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In our previous blog &lt;a href=&#34;https://medium.com/yik-yak-eng/migration-to-google-cloud-platform-overview-9b5e5c17c368&#34;&gt;post&lt;/a&gt; we gave an overview of our migration to Google Cloud Platform from Amazon Web Services. In this post we will drill down into the role that &lt;a href=&#34;http://grpc.io/&#34;&gt;gRPC&lt;/a&gt; and &lt;a href=&#34;https://github.com/grpc-ecosystem/grpc-gateway&#34;&gt;grpc-gateway&lt;/a&gt; played in that migration and share some lessons which we picked up along the way.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>So You Want to Optimize gRPC - Part 1</title>
      <link>http://grpc.io/blog/2018-03-06-so-you-want-to-optimize-grpc-part-1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://grpc.io/blog/2018-03-06-so-you-want-to-optimize-grpc-part-1/</guid>
      <description>&lt;p&gt;A common question with gRPC is how to make it fast.  The gRPC library offers users access to high
performance RPCs, but it isn&amp;rsquo;t always clear how to achieve this.  Because this question is common
enough I thought I would try to show my thought process when tuning programs.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>So You Want to Optimize gRPC - Part 2</title>
      <link>http://grpc.io/blog/2018-04-16-so-you-want-to-optimize-grpc-part-2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://grpc.io/blog/2018-04-16-so-you-want-to-optimize-grpc-part-2/</guid>
      <description>&lt;p&gt;How fast is gRPC?  Pretty fast if you understand how modern clients and servers are built.  In
&lt;a href=&#34;http://grpc.io/blog/optimizing-grpc-part-1&#34;&gt;part 1&lt;/a&gt;, I showed how to get an easy &lt;strong&gt;60%&lt;/strong&gt; improvement.  In this
post I show how to get a &lt;strong&gt;10000%&lt;/strong&gt; improvement.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Take the gRPC Survey!</title>
      <link>http://grpc.io/blog/2018-08-14-take-the-grpc-survey/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://grpc.io/blog/2018-08-14-take-the-grpc-survey/</guid>
      <description>&lt;h2 id=&#34;the-grpc-project-wants-your-feedback&#34;&gt;The gRPC Project wants your feedback!&lt;/h2&gt;

&lt;p&gt;The gRPC project is looking for feedback to improve the gRPC experience. To do this, we are running a &lt;a href=&#34;http://bit.ly/gRPC18survey&#34;&gt;gRPC user survey&lt;/a&gt;. We invite you to participate  and provide input that will help us better plan and prioritize.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>The gRPC Meetup Kit</title>
      <link>http://grpc.io/blog/2017-09-14-meetup-kit/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://grpc.io/blog/2017-09-14-meetup-kit/</guid>
      <description>If you have ever wanted to run an event around gRPC, but didn&amp;rsquo;t know where to start, or wasn&amp;rsquo;t sure what content is available - we have released the gRPC Meetup Kit!
 The meetup kit includes a 15 minute presentation on the basic concepts of gRPC, with accompanying slides and video for either reference or playback, as well as a 45 minute codelab that takes you through the basics of gRPC in Node.</description>
    </item>
    
    <item>
      <title>Why we have decided to move our APIs to gRPC</title>
      <link>http://grpc.io/blog/2016-08-29-vendasta/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://grpc.io/blog/2016-08-29-vendasta/</guid>
      <description>Our guest post today comes from Dale Hopkins, CTO of Vendasta.
Vendasta started out 8 years ago as a point solution provider of products for small business. From the beginning we partnered with media companies and agencies who have armies of salespeople and existing relationships with those businesses to sell our software. It is estimated that over 30 million small businesses exist in the United States alone, so scalability of our SaaS solution was considered one of our top concerns from the beginning and it was the reason we started with Google App Engine and Datastore.</description>
    </item>
    
    <item>
      <title>gRPC &#43; JSON</title>
      <link>http://grpc.io/blog/2018-08-15-grpc-with-json/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://grpc.io/blog/2018-08-15-grpc-with-json/</guid>
      <description>&lt;p&gt;So you&amp;rsquo;ve bought into this whole RPC thing and want to try it out, but aren&amp;rsquo;t quite sure about Protocol Buffers.  Your existing code encodes your own objects, or perhaps you have code that needs a particular encoding.  What to do?&lt;/p&gt;

&lt;p&gt;Fortunately, gRPC is encoding agnostic!  You can still get a lot of the benefits of gRPC without using Protobuf.  In this post we&amp;rsquo;ll go through how to make gRPC work with other encodings and types.  Let&amp;rsquo;s try using JSON.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>gRPC - now with easy installation.</title>
      <link>http://grpc.io/blog/2016-4-4-installation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://grpc.io/blog/2016-4-4-installation/</guid>
      <description>&lt;p&gt;Today we are happy to provide an update that significantly simplifies the getting started experience for gRPC.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;For most languages, &lt;strong&gt;the gRPC runtime can now be installed in a single step via native package managers&lt;/strong&gt; such as &lt;code&gt;npm&lt;/code&gt; for Node.js, &lt;code&gt;gem&lt;/code&gt; for Ruby and &lt;code&gt;pip&lt;/code&gt; for Python. Even though our Node, Ruby and Python runtimes are wrapped on gRPC&amp;rsquo;s C core, users now don&amp;rsquo;t need to explicitly pre-install the C core library as a package in most Linux distributions. We autofetch it for you :-).&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;For Java, we have simplified the steps needed to add gRPC support to your build tools&lt;/strong&gt; by providing plugins for Maven and Gradle. These let you easily depend on the core runtime to deploy or ship generated libraries into production environments.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;You can also use our Dockerfiles to use these updated packages - deploying microservices built on gRPC should now be a very simple experience.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>gRPC Load Balancing</title>
      <link>http://grpc.io/blog/2017-06-15-grpc-load-balancing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://grpc.io/blog/2017-06-15-grpc-load-balancing/</guid>
      <description>&lt;p&gt;This post describes various load balancing scenarios seen when deploying gRPC. If you use &lt;a href=&#34;http://grpc.io/&#34;&gt;gRPC&lt;/a&gt; with multiple backends, this document is for you.&lt;/p&gt;

&lt;p&gt;A large scale gRPC deployment typically has a number of identical back-end instances, and a number of clients. Each server has a certain capacity. Load balancing is used for distributing the load from clients optimally across available servers.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>gRPC Motivation and Design Principles.</title>
      <link>http://grpc.io/blog/2015-9-8-principles/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://grpc.io/blog/2015-9-8-principles/</guid>
      <description>Motivation Google has been using a single general-purpose RPC infrastructure called Stubby to connect the large number of microservices running within and across our data centers for over a decade. Our internal systems have long embraced the microservice architecture gaining popularity today. Having a uniform, cross-platform RPC infrastructure has allowed for the rollout of fleet-wide improvements in efficiency, security, reliability and behavioral analysis critical to supporting the incredible growth seen in that period.</description>
    </item>
    
    <item>
      <title>gRPC Project is now 1.0 and ready for production deployments</title>
      <link>http://grpc.io/blog/2016-08-23-gablog/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://grpc.io/blog/2016-08-23-gablog/</guid>
      <description>Today, the gRPC project has reached a significant milestone with its 1.0 release. Languages moving to 1.0 include C++, Java, Go, Node, Ruby, Python and C# across Linux, Windows, and Mac. Objective-C and Android Java support on iOS and Android is also moving to 1.0. The 1.0 release means that the core protocol and API surface are now stable with measured performance, stress tested and developers can rely on these APIs and deploy in production, they will follow semantic versioning from here.</description>
    </item>
    
    <item>
      <title>gRPC and Deadlines</title>
      <link>http://grpc.io/blog/2018-02-26-grpc-and-deadlines/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://grpc.io/blog/2018-02-26-grpc-and-deadlines/</guid>
      <description>&lt;p&gt;&lt;strong&gt;TL;DR Always set a deadline&lt;/strong&gt;. This post explains why we recommend being deliberate about setting deadlines, with useful code snippets to show you how.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>gRPC at VSCO</title>
      <link>http://grpc.io/blog/2016-09-06-vsco/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://grpc.io/blog/2016-09-06-vsco/</guid>
      <description>&lt;p&gt;Our guest post today comes from Robert Sayre and Melinda Lu of VSCO.&lt;/p&gt;

&lt;p&gt;Founded in 2011, &lt;a href=&#34;https://vsco.co&#34;&gt;VSCO&lt;/a&gt; is a community for expression—empowering people to create, discover and connect through images and words. VSCO is in the process of migrating their stack to gRPC.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>gRPC in Helm</title>
      <link>http://grpc.io/blog/2017-05-15-helm-grpc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://grpc.io/blog/2017-05-15-helm-grpc/</guid>
      <description>&lt;p&gt;&lt;em&gt;Our guest post today comes from Brian Hardock, a software engineer from Deis working on the &lt;a href=&#34;https://helm.sh/&#34;&gt;Helm&lt;/a&gt; project.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Helm is the package manager for Kubernetes. Helm provides its users with a customizable mechanism for
managing distributed applications and controlling their deployment.&lt;/p&gt;

&lt;p&gt;I have the good fortune to be a member of the phenomenal open-source Kubernetes Helm community serving as
a core contributor. My first day working with the Helm team was spent prototyping the architecture for
the next generation of Helm. By the end of that day, we had procured the preliminary RPC protocol data model
used to enable communication between Helm and its in-cluster server component, Tiller.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>gRPC releases Beta, opening door for use in production environments.</title>
      <link>http://grpc.io/blog/2015-10-26-principles/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://grpc.io/blog/2015-10-26-principles/</guid>
      <description>The gRPC team is excited to announce the immediate availability of gRPC Beta. This release marks an important point in API stability and going forward most API changes are expected to be additive in nature. This milestone opens the door for gRPC use in production environments.   We’re also taking a big step forward in improving the installation process. Over the past few weeks we’ve rolled out gRPC packages to Debian Stable/Backports.</description>
    </item>
    
    <item>
      <title>gRPC with REST and Open APIs</title>
      <link>http://grpc.io/blog/2016-5-9-coreos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://grpc.io/blog/2016-5-9-coreos/</guid>
      <description>&lt;p&gt;Our guest post today comes from Brandon Phillips of &lt;a href=&#34;https://coreos.com/&#34;&gt;CoreOS&lt;/a&gt;. CoreOS builds open source projects and products for Linux Containers. Their flagship product for consensus and discovery &lt;a href=&#34;https://coreos.com/etcd/&#34;&gt;etcd&lt;/a&gt; and their container engine &lt;a href=&#34;https://coreos.com/rkt/&#34;&gt;rkt&lt;/a&gt; are early adopters of gRPC.&lt;/p&gt;

&lt;p&gt;One of the key reasons CoreOS chose gRPC is because it uses HTTP/2, enabling applications to present both a HTTP 1.1 REST/JSON API and an efficient gRPC interface on a single TCP port (available for Go). This provides developers with compatibility with the REST web ecosystem, while advancing a new, high-efficiency RPC protocol. With the recent release of Go 1.6, Go ships with a stable &lt;code&gt;net/http2&lt;/code&gt; package by default.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>gRPC ❤ Kotlin</title>
      <link>http://grpc.io/blog/2018-06-19-kotlin-project-setup/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://grpc.io/blog/2018-06-19-kotlin-project-setup/</guid>
      <description>&lt;p&gt;Did you know that gRPC Java now has out of box support for Kotlin projects built with Gradle? &lt;a href=&#34;https://kotlinlang.org/&#34;&gt;Kotlin&lt;/a&gt; is a modern, statically typed language developed by JetBrains that targets the JVM and Android. It is generally easy for Kotlin programs to interoperate with existing Java libraries. To improve this experience further, we have added support to the &lt;a href=&#34;https://github.com/google/protobuf-gradle-plugin/releases&#34;&gt;protobuf-gradle-plugin&lt;/a&gt; so that the generated Java libraries are automatically picked up by Kotlin. You can now add the protobuf-gradle-plugin to your Kotlin project, and use gRPC just like you would with a typical Java project.

The following examples show you how to configure a project for a JVM application and an Android application using Kotlin.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>